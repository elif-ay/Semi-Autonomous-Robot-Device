#include <netinet/in.h>
#include <arpa/inet.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/socket.h>
#include <unistd.h>
#include <bits/stdc++.h>
#include "Client.h"

#define PORT 8080
#define IP_ADDRESS "10.10.10.10"



class MyWindow{
    public:
        Client clientObject;
        int clientSocketNo ;
        MyWindow();
        void receive_instruction();
        boolean connectSocket();
    
    };

void receive_instruction(){
    //use open socket variable clientObject.clientsocket1 for data recieve 
    
    std::string receivedData;
    int currentSocket=clientObject.socket1();

    if(connectSocket(currentSocket)){

        while (true){
            try{
            receivedData=clientObject.rcv_data();
            std::cout << "Received data from the server:" << std::endl;
            std::cout << receivedData << std::endl;
            
            }catch (...)  {
                cout << "Data cannot be read\n";
                break;
            }
            if receivedData ==""{
                break;
            }
            else{
                //parse the input 
                vector<string> cmdArray = split(receivedData, "\n");
                cout << cmdArray << endl;
                
                for(int i=0; i< cmdArray.size(); i++){
                    std::string data=cmdArray[i].split("#");
                    if(data == ""){
                        break;
                        clientObject.tcpFlag=False;
                    }
                    cout << "Line:  ";

                    cout << data << endl;


                }
            }

        }      
        

    }
}

vector<string> split(string str, string delimiter)
{
    vector<string> vecOut;
    if (!str.empty()) {
        int start = 0;
        do {
            // Find the index of occurrence
            int idx = str.find(delimiter, start);
            if (idx == string::npos) {
                break;
            }
 
            // If found add the substring till occurrence in the vector
            int length = idx - start;
            vecOut.push_back(str.substr(start, length));
            start += (length + delimiter.size());
        } while (true);

        vecOut.push_back(str.substr(start));
    }
 
    return vecOut;
}

boolean connectSocket(int socket){
    struct sockaddr_in serverAddress;  
//turns on both sockets declared
    clientObject.turn_on_client(IP_ADDRESS);         

    serverAddress.sin_family = AF_INET;  
    serverAddress.sin_port = htons(PORT); 

    if (inet_pton(AF_INET, IP_ADDRESS.c_str(), &(serverAddress.sin_addr)) <= 0) {
        std::cerr << "Invalid address or address not supported" << std::endl;
        clientObject.turn_off_client();
        return;
    }

    // Connection to socket given as parameter
    if (status=connect(socket, (struct sockaddr*)&serverAddr, sizeof(serverAddr)) < 0) {
        std::cerr << "Connection failed" << std::endl;
        clientObject.turn_off_client();
        return;
    } 
    cout << "Socket connection done" << endl;

}
